/* eslint-disable */
export class ClientWithAuth {
	public transformOptions(options: RequestInit): Promise<RequestInit> {
		options.credentials = 'include';

		return new Promise<RequestInit>((resolve) => resolve(options));
	}
}

/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.2.2.0 (NJsonSchema v10.1.4.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import * as moment from 'moment';

export class Client extends ClientWithAuth {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    apiDronesV1(): Promise<DroneDto[]> {
        let url_ = this.baseUrl + "/api/drones/v1";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processApiDronesV1(_response);
        });
    }

    protected processApiDronesV1(response: Response): Promise<DroneDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DroneDto.fromJS(item));
            }
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            return throwException("Bad Request", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DroneDto[]>(<any>null);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    apiLocationsV1Send(body?: LocationRequest | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/locations/v1/send";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processApiLocationsV1Send(_response);
        });
    }

    protected processApiLocationsV1Send(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            return throwException("Bad Request", status, _responseText, _headers);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            return throwException("Forbidden", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(<any>null);
    }
}

export class LocationDto implements ILocationDto {
    latitude!: number;
    longitude!: number;
    timestamp!: moment.Moment;

    constructor(data?: ILocationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.latitude = _data["latitude"] !== undefined ? _data["latitude"] : <any>null;
            this.longitude = _data["longitude"] !== undefined ? _data["longitude"] : <any>null;
            this.timestamp = _data["timestamp"] ? moment(_data["timestamp"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): LocationDto {
        data = typeof data === 'object' ? data : {};
        let result = new LocationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["latitude"] = this.latitude !== undefined ? this.latitude : <any>null;
        data["longitude"] = this.longitude !== undefined ? this.longitude : <any>null;
        data["timestamp"] = this.timestamp ? this.timestamp.toISOString() : <any>null;
        return data; 
    }
}

export interface ILocationDto {
    latitude: number;
    longitude: number;
    timestamp: moment.Moment;
}

export class DroneDto implements IDroneDto {
    droneId!: string;
    name!: string;
    lastLocation!: LocationDto;

    constructor(data?: IDroneDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.lastLocation = data.lastLocation && !(<any>data.lastLocation).toJSON ? new LocationDto(data.lastLocation) : <LocationDto>this.lastLocation; 
        }
        if (!data) {
            this.lastLocation = new LocationDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.droneId = _data["droneId"] !== undefined ? _data["droneId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.lastLocation = _data["lastLocation"] ? LocationDto.fromJS(_data["lastLocation"]) : new LocationDto();
        }
    }

    static fromJS(data: any): DroneDto {
        data = typeof data === 'object' ? data : {};
        let result = new DroneDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["droneId"] = this.droneId !== undefined ? this.droneId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["lastLocation"] = this.lastLocation ? this.lastLocation.toJSON() : <any>null;
        return data; 
    }
}

export interface IDroneDto {
    droneId: string;
    name: string;
    lastLocation: ILocationDto;
}

export class LocationRequest implements ILocationRequest {
    droneId!: string;
    latitude!: number;
    longitude!: number;

    constructor(data?: ILocationRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.droneId = _data["droneId"] !== undefined ? _data["droneId"] : <any>null;
            this.latitude = _data["latitude"] !== undefined ? _data["latitude"] : <any>null;
            this.longitude = _data["longitude"] !== undefined ? _data["longitude"] : <any>null;
        }
    }

    static fromJS(data: any): LocationRequest {
        data = typeof data === 'object' ? data : {};
        let result = new LocationRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["droneId"] = this.droneId !== undefined ? this.droneId : <any>null;
        data["latitude"] = this.latitude !== undefined ? this.latitude : <any>null;
        data["longitude"] = this.longitude !== undefined ? this.longitude : <any>null;
        return data; 
    }
}

export interface ILocationRequest {
    droneId: string;
    latitude: number;
    longitude: number;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}