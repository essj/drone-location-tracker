// <auto-generated />
using System;
using DroneLocationTracker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DroneLocationTracker.Data.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20200126121342_AddDronesAndLocations")]
    partial class AddDronesAndLocations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1");

            modelBuilder.Entity("DroneLocationTracker.Data.Models.Drone", b =>
                {
                    b.Property<Guid>("DroneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("DroneId");

                    b.ToTable("Drones");
                });

            modelBuilder.Entity("DroneLocationTracker.Data.Models.Location", b =>
                {
                    b.Property<Guid>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DroneId")
                        .HasColumnType("TEXT");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.HasKey("LocationId");

                    b.HasIndex("DroneId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("DroneLocationTracker.Data.Models.Location", b =>
                {
                    b.HasOne("DroneLocationTracker.Data.Models.Drone", "Drone")
                        .WithMany("Locations")
                        .HasForeignKey("DroneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
